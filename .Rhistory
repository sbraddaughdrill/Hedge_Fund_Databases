str(EurekahedgeHF_Fee_and_Redemption)
a_ply(.data=final_folder_files[final_folder_files[,"import"] %in% c(2),], .margins=1, .fun = function(x,directory_in,unknowns){
# x <- final_folder_files[8,]
# directory_in <- final_folder_path
# unknowns <- unknowns_strings
#input <- read.csv(file=paste(final_folder_path,"//",x[,"file_name"],".csv",sep=""),header=TRUE,na.strings="NA",stringsAsFactors=FALSE)
input <- data.frame(read.csv(file=paste(final_folder_path,"//",x[,"file_name"],".csv",sep=""),header=TRUE,na.strings="NA",stringsAsFactors=FALSE),
stringsAsFactors=FALSE)
for(i in which(sapply(input,class)=="character"))
{
input[[i]] = trim(input[[i]])
}
rm(i)
for (i in 1:ncol(input))
{
input[,i] <- unknownToNA(input[,i], unknown=unknowns,force=TRUE)
input[,i] <- ifelse(is.na(input[,i]),NA,input[,i])
}
rm(i)
input <- input[rowSums(is.na(input[,1:ncol(input)]))<ncol(input),]
row.names(input) <- seq(nrow(input))
input <- input[,colSums(is.na(input))<nrow(input)]
#colnames(input) <- tolower(colnames(input))
input  <- input[order(input[,"Fund_ID"],input[,"Fund_Name"],input[,"pull_trim"],input[,"pull_trim2"]),]
row.names(input) <- seq(nrow(input))
if("Date_Added" %in% colnames(input)){input[,"Date_Added"] <- as.yearmon(input[,"Date_Added"],format="%b %Y")}
if("Dead_Date" %in% colnames(input)){input[,"Dead_Date"] <- as.yearmon(input[,"Dead_Date"],format="%b %Y")}
assign(x[,"file_name"], input, envir = .GlobalEnv)
gc()
}, directory_in=final_folder_path, unknowns=unknowns_strings, .expand = TRUE, .progress = "text")
View(final_folder_files)
a_ply(.data=final_folder_files[final_folder_files[,"import"] %in% c(3),], .margins=1, .fun = function(x,directory_in,unknowns){
# x <- final_folder_files[8,]
# directory_in <- final_folder_path
# unknowns <- unknowns_strings
#input <- read.csv(file=paste(final_folder_path,"//",x[,"file_name"],".csv",sep=""),header=TRUE,na.strings="NA",stringsAsFactors=FALSE)
input_cols_keep <- c("pull_trim","pull","Fund_ID","Dead_Date","yr","month","date","bad_min","bad_max","AUM")
input <- data.frame(read.csv(file=paste(final_folder_path,"//",x[,"file_name"],".csv",sep=""),header=TRUE,na.strings="NA",stringsAsFactors=FALSE)[,Merge_IDs_cols_keep],
stringsAsFactors=FALSE)
#input <- data.frame(read.csv(file=paste(final_folder_path,"//",x[,"file_name"],".csv",sep=""),header=TRUE,na.strings="NA",stringsAsFactors=FALSE),
#                    stringsAsFactors=FALSE)
rm2(input_cols_keep)
colnames(input)[match("AUM",names(input))] <- "pull_trim2"
input[,"pull_trim2"] <- input[,"pull"]
input[,"pull_trim2"] <- gsub(pattern="_NAV_AUM", replacement="", x=input[,"pull_trim2"])
input <- input[,c("pull_trim","pull_trim2","pull",
colnames(input)[!(colnames(input) %in% c("pull_trim","pull_trim2","pull"))])]
input[,"pull_trim"] <- as.character(input[,"pull_trim"])
for(i in which(sapply(input,class)=="character"))
{
input[[i]] = trim(input[[i]])
}
rm(i)
for (i in 1:ncol(input))
{
input[,i] <- unknownToNA(input[,i], unknown=unknowns,force=TRUE)
input[,i] <- ifelse(is.na(input[,i]),NA,input[,i])
}
rm(i)
input <- input[rowSums(is.na(input[,1:ncol(input)]))<ncol(input),]
row.names(input) <- seq(nrow(input))
input <- input[,colSums(is.na(input))<nrow(input)]
#colnames(input) <- tolower(colnames(input))
#input  <- input[order(input[,"Fund_ID"],input[,"Fund_Name"],input[,"pull"]),]
input  <- input[order(input[,"Fund_ID"],input[,"Fund_Name"],input[,"pull_trim"],input[,"pull_trim2"]),]
row.names(input) <- seq(nrow(input))
if("Date_Added" %in% colnames(input)){input[,"Date_Added"] <- as.yearmon(input[,"Date_Added"],format="%b %Y")}
if("Dead_Date" %in% colnames(input)){input[,"Dead_Date"] <- as.yearmon(input[,"Dead_Date"],format="%b %Y")}
assign(x[,"file_name"], input, envir = .GlobalEnv)
rm(input)
invisible(gc(verbose = FALSE, reset = TRUE))
}, directory_in=final_folder_path, unknowns=unknowns_strings, .expand = TRUE, .progress = "text")
invisible(gc(verbose = FALSE, reset = TRUE))
a_ply(.data=final_folder_files[final_folder_files[,"import"] %in% c(3),], .margins=1, .fun = function(x,directory_in,unknowns){
# x <- final_folder_files[8,]
# directory_in <- final_folder_path
# unknowns <- unknowns_strings
#input <- read.csv(file=paste(final_folder_path,"//",x[,"file_name"],".csv",sep=""),header=TRUE,na.strings="NA",stringsAsFactors=FALSE)
input_cols_keep <- c("pull_trim","pull","Fund_ID","Dead_Date","yr","month","date","bad_min","bad_max","AUM")
input <- data.frame(read.csv(file=paste(final_folder_path,"//",x[,"file_name"],".csv",sep=""),header=TRUE,na.strings="NA",stringsAsFactors=FALSE)[,Merge_IDs_cols_keep],
stringsAsFactors=FALSE)
#input <- data.frame(read.csv(file=paste(final_folder_path,"//",x[,"file_name"],".csv",sep=""),header=TRUE,na.strings="NA",stringsAsFactors=FALSE),
#                    stringsAsFactors=FALSE)
rm2(input_cols_keep)
colnames(input)[match("AUM",names(input))] <- "pull_trim2"
input[,"pull_trim2"] <- input[,"pull"]
input[,"pull_trim2"] <- gsub(pattern="_NAV_AUM", replacement="", x=input[,"pull_trim2"])
input <- input[,c("pull_trim","pull_trim2","pull",
colnames(input)[!(colnames(input) %in% c("pull_trim","pull_trim2","pull"))])]
input[,"pull_trim"] <- as.character(input[,"pull_trim"])
for(i in which(sapply(input,class)=="character"))
{
input[[i]] = trim(input[[i]])
}
rm(i)
for (i in 1:ncol(input))
{
input[,i] <- unknownToNA(input[,i], unknown=unknowns,force=TRUE)
input[,i] <- ifelse(is.na(input[,i]),NA,input[,i])
}
rm(i)
input <- input[rowSums(is.na(input[,1:ncol(input)]))<ncol(input),]
row.names(input) <- seq(nrow(input))
input <- input[,colSums(is.na(input))<nrow(input)]
#colnames(input) <- tolower(colnames(input))
#input  <- input[order(input[,"Fund_ID"],input[,"Fund_Name"],input[,"pull"]),]
input  <- input[order(input[,"Fund_ID"],input[,"Fund_Name"],input[,"pull_trim"],input[,"pull_trim2"]),]
row.names(input) <- seq(nrow(input))
if("Date_Added" %in% colnames(input)){input[,"Date_Added"] <- as.yearmon(input[,"Date_Added"],format="%b %Y")}
if("Dead_Date" %in% colnames(input)){input[,"Dead_Date"] <- as.yearmon(input[,"Dead_Date"],format="%b %Y")}
#assign(x[,"file_name"], input, envir = .GlobalEnv)
assign("Merge_IDs", input, envir = .GlobalEnv)
rm(input)
invisible(gc(verbose = FALSE, reset = TRUE))
}, directory_in=final_folder_path, unknowns=unknowns_strings, .expand = TRUE, .progress = "text")
invisible(gc(verbose = FALSE, reset = TRUE))
a_ply(.data=final_folder_files[final_folder_files[,"import"] %in% c(3),], .margins=1, .fun = function(x,directory_in,unknowns){
# x <- final_folder_files[8,]
# directory_in <- final_folder_path
# unknowns <- unknowns_strings
#input <- read.csv(file=paste(final_folder_path,"//",x[,"file_name"],".csv",sep=""),header=TRUE,na.strings="NA",stringsAsFactors=FALSE)
input_cols_keep <- c("pull_trim","pull","Fund_ID","Dead_Date","yr","month","date","bad_min","bad_max","AUM")
input <- data.frame(read.csv(file=paste(final_folder_path,"//",x[,"file_name"],".csv",sep=""),header=TRUE,na.strings="NA",stringsAsFactors=FALSE)[,input_cols_keep],
stringsAsFactors=FALSE)
#input <- data.frame(read.csv(file=paste(final_folder_path,"//",x[,"file_name"],".csv",sep=""),header=TRUE,na.strings="NA",stringsAsFactors=FALSE),
#                    stringsAsFactors=FALSE)
rm2(input_cols_keep)
colnames(input)[match("AUM",names(input))] <- "pull_trim2"
input[,"pull_trim2"] <- input[,"pull"]
input[,"pull_trim2"] <- gsub(pattern="_NAV_AUM", replacement="", x=input[,"pull_trim2"])
input <- input[,c("pull_trim","pull_trim2","pull",
colnames(input)[!(colnames(input) %in% c("pull_trim","pull_trim2","pull"))])]
input[,"pull_trim"] <- as.character(input[,"pull_trim"])
for(i in which(sapply(input,class)=="character"))
{
input[[i]] = trim(input[[i]])
}
rm(i)
for (i in 1:ncol(input))
{
input[,i] <- unknownToNA(input[,i], unknown=unknowns,force=TRUE)
input[,i] <- ifelse(is.na(input[,i]),NA,input[,i])
}
rm(i)
input <- input[rowSums(is.na(input[,1:ncol(input)]))<ncol(input),]
row.names(input) <- seq(nrow(input))
input <- input[,colSums(is.na(input))<nrow(input)]
#colnames(input) <- tolower(colnames(input))
#input  <- input[order(input[,"Fund_ID"],input[,"Fund_Name"],input[,"pull"]),]
input  <- input[order(input[,"Fund_ID"],input[,"Fund_Name"],input[,"pull_trim"],input[,"pull_trim2"]),]
row.names(input) <- seq(nrow(input))
if("Date_Added" %in% colnames(input)){input[,"Date_Added"] <- as.yearmon(input[,"Date_Added"],format="%b %Y")}
if("Dead_Date" %in% colnames(input)){input[,"Dead_Date"] <- as.yearmon(input[,"Dead_Date"],format="%b %Y")}
#assign(x[,"file_name"], input, envir = .GlobalEnv)
assign("Merge_IDs", input, envir = .GlobalEnv)
rm(input)
invisible(gc(verbose = FALSE, reset = TRUE))
}, directory_in=final_folder_path, unknowns=unknowns_strings, .expand = TRUE, .progress = "text")
invisible(gc(verbose = FALSE, reset = TRUE))
# TODO: Add comment
#
# Author:  Brad
# File:    Hedge_Fund_Databases_Eurekahedge_Expand_Fields.R
# Version: 1.0
# Date:    11.10.2014
# Purpose: Expand Eurekahedge Fields
#
###############################################################################
###############################################################################
cat("SECTION: INITIAL SETUP", "\n")
###############################################################################
# Clear workspace
rm(list = ls(all = TRUE))
rm(list = ls(all.names = TRUE))
# Limit History to not exceed 500 lines
Sys.setenv(R_HISTSIZE = 500)
repo <- c("http://cran.us.r-project.org")
options(repos = structure(repo))
options(install.packages.check.source = FALSE)
# String as factors is False -- used for read.csv
options(StringsAsFactors = FALSE)
# Default maxprint option
options(max.print = 500)
# options(max.print=99999)
# Memory limit
#memory.limit(size = 8183)
#Remove scientific notation if digits less than 100
options("scipen"=100)
#Uknown Strings
#unknowns_strings <- c("",".",NA,"na","n/a","n\a","NA","N/A","N\\A","<NA>","null","NULL",NULL,"nan","NaN",NaN,
#                      NA_integer_,"NA_integer_",NA_complex_,"NA_complex_",NA_character_,
#                      "NA_character_",NA_real_,"NA_real_")
unknowns_strings <- c(" ","\n","",".","n/a","na","NA",NA,"<NA>","null","NULL",NULL,"nan","NaN",NaN,Inf,
NA_integer_,"NA_integer_",NA_complex_,"NA_complex_",
NA_character_,"NA_character_",NA_real_,"NA_real_")
# Set location (1=HOME,2=WORK,3=LAPTOP,4=CORALSEA FROM HOME,5=CORALSEA FROM WORK,6=CORALSEA FROM LAPTOP)
Location <- 1
if (Location == 1) {
#input_directory <- normalizePath("C:/Users/S.Brad/Dropbox/Research/Hedge_Fund_Databases/Data",winslash="\\", mustWork=TRUE)
input_directory <- normalizePath("F:/Dropbox/Research/Hedge_Fund_Databases/Data",winslash="\\", mustWork=TRUE)
output_directory <- normalizePath("F:/Import_Data/Data/Eurekahedge",winslash="\\", mustWork=TRUE)
#function_directory <- normalizePath("C:/Users/S.Brad/Dropbox/Research_Methods/R", winslash = "\\", mustWork = TRUE)
function_directory <- normalizePath("F:/Dropbox/Research_Methods/R", winslash = "\\", mustWork = TRUE)
} else if (Location == 2) {
input_directory <- normalizePath("C:/Users/bdaughdr/Dropbox/Research/Hedge_Fund_Databases/Data",winslash="\\", mustWork=TRUE)
output_directory <- normalizePath("C:/Import_Data/Data/Eurekahedge",winslash="\\", mustWork=TRUE)
function_directory <- normalizePath("C:/Users/bdaughdr/Dropbox/Research_Methods/R",winslash="\\", mustWork=TRUE)
} else if (Location == 3) {
input_directory <- normalizePath("C:/Users/S.Brad/Dropbox/Research/Hedge_Fund_Databases/Data",winslash="\\", mustWork=TRUE)
output_directory <- normalizePath("C:/Import_Data/Data/Eurekahedge",winslash="\\", mustWork=TRUE)
function_directory <- normalizePath("C:/Users/S.Brad/Dropbox/Research_Methods/R", winslash = "\\", mustWork = TRUE)
} else if (Location == 4) {
input_directory <- normalizePath("H:/Research/Hedge_Fund_Databases/Data", winslash = "\\", mustWork = TRUE)
#output_directory <- normalizePath("C:/Users/bdaughdr/Documents/Import_Data/Data/Eurekahedge",winslash="\\", mustWork=TRUE)
output_directory <- normalizePath("H:/Research/Import_Data/Data/Eurekahedge", winslash = "\\", mustWork = TRUE)
#function_directory <- normalizePath("//tsclient/C/Users/S.Brad/Dropbox/Research_Methods/R", winslash = "\\", mustWork = TRUE)
function_directory <- normalizePath("//tsclient/F/Dropbox/Research_Methods/R", winslash = "\\", mustWork = TRUE)
} else if (Location == 5) {
input_directory <- normalizePath("H:/Research/Hedge_Fund_Databases/Data", winslash = "\\", mustWork = TRUE)
#output_directory <- normalizePath("C:/Users/bdaughdr/Documents/Import_Data/Data/Eurekahedge",winslash="\\", mustWork=TRUE)
output_directory <- normalizePath("H:/Research/Import_Data/Data/Eurekahedge", winslash = "\\", mustWork = TRUE)
function_directory <- normalizePath("//tsclient/C/Users/bdaughdr/Dropbox/Research_Methods/R", winslash = "\\", mustWork = TRUE)
} else if (Location == 6) {
input_directory <- normalizePath("H:/Research/Hedge_Fund_Databases/Data", winslash = "\\", mustWork = TRUE)
#output_directory <- normalizePath("C:/Users/bdaughdr/Documents/Import_Data/Data/Eurekahedge",winslash="\\", mustWork=TRUE)
output_directory <- normalizePath("H:/Research/Import_Data/Data/Eurekahedge", winslash = "\\", mustWork = TRUE)
#function_directory <- normalizePath("//tsclient/C/Users/S.Brad/Dropbox/Research_Methods/R", winslash = "\\", mustWork = TRUE)
function_directory <- normalizePath("//tsclient/F/Dropbox/Research_Methods/R", winslash = "\\", mustWork = TRUE)
} else {
cat("ERROR ASSIGNING DIRECTORIES", "\n")
}
rm(Location)
###############################################################################
cat("SECTION: FUNCTIONS", "\n")
###############################################################################
source(file=paste(function_directory,"functions_db.R",sep="\\"),echo=FALSE)
source(file=paste(function_directory,"functions_statistics.R",sep="\\"),echo=FALSE)
source(file=paste(function_directory,"functions_text_analysis.R",sep="\\"),echo=FALSE)
#source(file=paste(function_directory,"functions_text_parse.R",sep="\\"),echo=FALSE)
source(file=paste(function_directory,"functions_utilities.R",sep="\\"),echo=FALSE)
###############################################################################
# LIBRARIES;
cat("SECTION: LIBRARIES", "\n")
###############################################################################
#Load External Packages
external_packages <- c("compare","cwhmisc","data.table","DataCombine","fastmatch","foreign","formatR","gdata",
"gtools","Hmisc","installr","knitr","koRpus","lmtest","lubridate","markdown","memisc","mitools",
"pander","pbapply","plm","plyr","psych","quantreg","R.oo","R2wd","reporttools","reshape2","rms","RSQLite",
"sandwich","sqldf","stargazer","stringr","texreg","tm","UsingR","xtable","zoo")
invisible(unlist(sapply(external_packages,load_external_packages, repo_str=repo, simplify=FALSE, USE.NAMES=FALSE)))
installed_packages <- list_installed_packages(external_packages)
rm(external_packages,installed_packages,repo)
###############################################################################
cat("SECTION: DEFINE DIRECTORIES", "\n")
###############################################################################
#Check to see if final folder exists.  If not, create it.
final_folder_path <- paste(output_directory, "Final", sep = "//", collapse = "//")
create_directory(final_folder_path,remove=1)
#Check to see if final folder exists.  If not, create it.
final_folder_expand_path <- paste(output_directory, "Final_Expand", sep = "//", collapse = "//")
create_directory(final_folder_expand_path,remove=1)
final_folder_files0 <- data.frame(files=list.files(path=final_folder_path),file_name=NA,import=NA,stringsAsFactors=FALSE)
#final_folder_files <- final_folder_files0[!grepl(".TXT|.txt", final_folder_files0[,"files"]),]
final_folder_files <- final_folder_files0[grepl(".CSV|.csv", final_folder_files0[,"files"]),]
rm2(final_folder_files0)
final_folder_files[,"file_name"] <- final_folder_files[,"files"]
final_folder_files[,"file_name"] <- gsub(pattern="(.CSV|.csv)", replacement="", x=final_folder_files[,"file_name"])
final_folder_files[,"import"] <- ifelse(grepl("(Stats|Fund_Detail|Fee_and_Redemption|Profile_Strategy|Identifier|Instruments_Traded)",final_folder_files[,"file_name"]),1,final_folder_files[,"import"])
final_folder_files[,"import"] <- ifelse(grepl("(Other)",final_folder_files[,"file_name"]),2,final_folder_files[,"import"])
final_folder_files[,"import"] <- ifelse(grepl("(NAV_AUM_Ret)",final_folder_files[,"file_name"]),3,final_folder_files[,"import"])
final_folder_files[,"import"] <- ifelse(is.na(final_folder_files[,"import"]),0,final_folder_files[,"import"])
###############################################################################
cat("SECTION: IMPORT FILES", "\n")
###############################################################################
a_ply(.data=final_folder_files[final_folder_files[,"import"] %in% c(1),], .margins=1, .fun = function(x,directory_in,unknowns){
# x <- final_folder_files[2,]
# x <- final_folder_files[3,]
# x <- final_folder_files[4,]
# directory_in <- final_folder_path
# unknowns <- unknowns_strings
#input <- read.csv(file=paste(final_folder_path,"//",x[,"file_name"],".csv",sep=""),header=TRUE,na.strings="NA",stringsAsFactors=FALSE)
input <- data.frame(pull_trim=NA,
read.csv(file=paste(final_folder_path,"//",x[,"file_name"],".csv",sep=""),header=TRUE,na.strings="NA",stringsAsFactors=FALSE),
stringsAsFactors=FALSE)
colnames(input)[match("pull",names(input))] <- "pull_trim2"
input[,"pull_trim"] <- input[,"pull_trim2"]
input[,"pull_trim"] <- gsub(pattern="([[:alpha:]]|[[:punct:]])", replacement="", input[,"pull_trim"])
input[,"pull_trim"] <- as.character(input[,"pull_trim"])
input[,"pull_trim2"] <- gsub(pattern="_Fund_Details_Fund_Details", replacement="", x=input[,"pull_trim2"])
input[,"pull_trim2"] <- gsub(pattern="_Fund_Details_Fee_and_Redemption_Structure", replacement="", x=input[,"pull_trim2"])
input[,"pull_trim2"] <- gsub(pattern="_Fund_Details_Unique_Identifiers", replacement="", x=input[,"pull_trim2"])
input[,"pull_trim2"] <- gsub(pattern="_Fund_Details_Profile_Strategy_Description", replacement="", x=input[,"pull_trim2"])
input[,"pull_trim2"] <- gsub(pattern="_Fund_Details_Statistics", replacement="", x=input[,"pull_trim2"])
input[,"pull_trim2"] <- gsub(pattern="_Instruments_Traded", replacement="", x=input[,"pull_trim2"])
for(i in which(sapply(input,class)=="character"))
{
input[[i]] = trim(input[[i]])
}
rm(i)
for (i in 1:ncol(input))
{
input[,i] <- unknownToNA(input[,i], unknown=unknowns,force=TRUE)
input[,i] <- ifelse(is.na(input[,i]),NA,input[,i])
}
rm(i)
input <- input[rowSums(is.na(input[,1:ncol(input)]))<ncol(input),]
row.names(input) <- seq(nrow(input))
input <- input[,colSums(is.na(input))<nrow(input)]
#colnames(input) <- tolower(colnames(input))
#input  <- input[order(input[,"Fund_ID"],input[,"Fund_Name"],input[,"pull"]),]
input  <- input[order(input[,"Fund_ID"],input[,"pull_trim"],input[,"pull_trim2"]),]
row.names(input) <- seq(nrow(input))
if("Date_Added" %in% colnames(input)){input[,"Date_Added"] <- as.yearmon(input[,"Date_Added"],format="%b %Y")}
if("Dead_Date" %in% colnames(input)){input[,"Dead_Date"] <- as.yearmon(input[,"Dead_Date"],format="%b %Y")}
assign(x[,"file_name"], input, envir = .GlobalEnv)
rm(input)
invisible(gc(verbose = FALSE, reset = TRUE))
}, directory_in=final_folder_path, unknowns=unknowns_strings, .expand = TRUE, .progress = "text")
invisible(gc(verbose = FALSE, reset = TRUE))
a_ply(.data=final_folder_files[final_folder_files[,"import"] %in% c(2),], .margins=1, .fun = function(x,directory_in,unknowns){
# x <- final_folder_files[8,]
# directory_in <- final_folder_path
# unknowns <- unknowns_strings
#input <- read.csv(file=paste(final_folder_path,"//",x[,"file_name"],".csv",sep=""),header=TRUE,na.strings="NA",stringsAsFactors=FALSE)
input <- data.frame(read.csv(file=paste(final_folder_path,"//",x[,"file_name"],".csv",sep=""),header=TRUE,na.strings="NA",stringsAsFactors=FALSE),
stringsAsFactors=FALSE)
input[,"pull_trim"] <- as.character(input[,"pull_trim"])
for(i in which(sapply(input,class)=="character"))
{
input[[i]] = trim(input[[i]])
}
rm(i)
for (i in 1:ncol(input))
{
input[,i] <- unknownToNA(input[,i], unknown=unknowns,force=TRUE)
input[,i] <- ifelse(is.na(input[,i]),NA,input[,i])
}
rm(i)
input <- input[rowSums(is.na(input[,1:ncol(input)]))<ncol(input),]
row.names(input) <- seq(nrow(input))
input <- input[,colSums(is.na(input))<nrow(input)]
#colnames(input) <- tolower(colnames(input))
#input  <- input[order(input[,"Fund_ID"],input[,"Fund_Name"],input[,"pull"]),]
input  <- input[order(input[,"Fund_ID"],input[,"pull_trim"],input[,"pull_trim2"]),]
row.names(input) <- seq(nrow(input))
if("Date_Added" %in% colnames(input)){input[,"Date_Added"] <- as.yearmon(input[,"Date_Added"],format="%b %Y")}
if("Dead_Date" %in% colnames(input)){input[,"Dead_Date"] <- as.yearmon(input[,"Dead_Date"],format="%b %Y")}
assign(x[,"file_name"], input, envir = .GlobalEnv)
rm(input)
invisible(gc(verbose = FALSE, reset = TRUE))
}, directory_in=final_folder_path, unknowns=unknowns_strings, .expand = TRUE, .progress = "text")
invisible(gc(verbose = FALSE, reset = TRUE))
a_ply(.data=final_folder_files[final_folder_files[,"import"] %in% c(3),], .margins=1, .fun = function(x,directory_in,unknowns){
# x <- final_folder_files[8,]
# directory_in <- final_folder_path
# unknowns <- unknowns_strings
#input <- read.csv(file=paste(final_folder_path,"//",x[,"file_name"],".csv",sep=""),header=TRUE,na.strings="NA",stringsAsFactors=FALSE)
input_cols_keep <- c("pull_trim","pull","Fund_ID","Dead_Date","yr","month","date","bad_min","bad_max","AUM")
input <- data.frame(read.csv(file=paste(final_folder_path,"//",x[,"file_name"],".csv",sep=""),header=TRUE,na.strings="NA",stringsAsFactors=FALSE)[,input_cols_keep],
stringsAsFactors=FALSE)
#input <- data.frame(read.csv(file=paste(final_folder_path,"//",x[,"file_name"],".csv",sep=""),header=TRUE,na.strings="NA",stringsAsFactors=FALSE),
#                    stringsAsFactors=FALSE)
rm2(input_cols_keep)
colnames(input)[match("AUM",names(input))] <- "pull_trim2"
input[,"pull_trim2"] <- input[,"pull"]
input[,"pull_trim2"] <- gsub(pattern="_NAV_AUM", replacement="", x=input[,"pull_trim2"])
input <- input[,c("pull_trim","pull_trim2","pull",
colnames(input)[!(colnames(input) %in% c("pull_trim","pull_trim2","pull"))])]
input[,"pull_trim"] <- as.character(input[,"pull_trim"])
for(i in which(sapply(input,class)=="character"))
{
input[[i]] = trim(input[[i]])
}
rm(i)
for (i in 1:ncol(input))
{
input[,i] <- unknownToNA(input[,i], unknown=unknowns,force=TRUE)
input[,i] <- ifelse(is.na(input[,i]),NA,input[,i])
}
rm(i)
input <- input[rowSums(is.na(input[,1:ncol(input)]))<ncol(input),]
row.names(input) <- seq(nrow(input))
input <- input[,colSums(is.na(input))<nrow(input)]
#colnames(input) <- tolower(colnames(input))
#input  <- input[order(input[,"Fund_ID"],input[,"Fund_Name"],input[,"pull"]),]
input  <- input[order(input[,"Fund_ID"],input[,"pull_trim"],input[,"pull_trim2"]),]
row.names(input) <- seq(nrow(input))
if("Date_Added" %in% colnames(input)){input[,"Date_Added"] <- as.yearmon(input[,"Date_Added"],format="%b %Y")}
if("Dead_Date" %in% colnames(input)){input[,"Dead_Date"] <- as.yearmon(input[,"Dead_Date"],format="%b %Y")}
#assign(x[,"file_name"], input, envir = .GlobalEnv)
assign("Merge_IDs", input, envir = .GlobalEnv)
rm(input)
invisible(gc(verbose = FALSE, reset = TRUE))
}, directory_in=final_folder_path, unknowns=unknowns_strings, .expand = TRUE, .progress = "text")
invisible(gc(verbose = FALSE, reset = TRUE))
View(EurekahedgeHF_Instruments_Traded)
EurekahedgeHF_Stats_noreturns_deaddates <- EurekahedgeHF_Stats_noreturns
EurekahedgeHF_Fund_Details_deaddates <- EurekahedgeHF_Fund_Details
EurekahedgeHF_Fee_and_Redemption_deaddates <- EurekahedgeHF_Fee_and_Redemption
EurekahedgeHF_Profile_Strategy_deaddates <- EurekahedgeHF_Profile_Strategy
EurekahedgeHF_Identifiers_deaddates <- EurekahedgeHF_Identifiers
EurekahedgeHF_Instruments_Traded_deaddates <- EurekahedgeHF_Instruments_Traded
EurekahedgeHF_Other_deaddates <- EurekahedgeHF_Other
rm2(EurekahedgeHF_Stats_noreturns,EurekahedgeHF_Fund_Details,EurekahedgeHF_Fee_and_Redemption)
rm2(EurekahedgeHF_Profile_Strategy,EurekahedgeHF_Identifiers,EurekahedgeHF_Instruments_Traded,EurekahedgeHF_Other)
fix_dead_dates_temp1 <- list(data=c("EurekahedgeHF_Stats_noreturns_deaddates"),col=c("Dead_Date"))
fix_dead_dates_temp2 <- list(data=c("EurekahedgeHF_Fund_Details_deaddates"),col=c("Dead_Date"))
fix_dead_dates_temp3 <- list(data=c("EurekahedgeHF_Fee_and_Redemption_deaddates"),col=c("Dead_Date"))
fix_dead_dates_temp4 <- list(data=c("EurekahedgeHF_Profile_Strategy_deaddates"),col=c("Dead_Date"))
fix_dead_dates_temp5 <- list(data=c("EurekahedgeHF_Identifiers_deaddates"),col=c("Dead_Date"))
fix_dead_dates_temp6 <- list(data=c("EurekahedgeHF_Instruments_Traded_deaddates"),col=c("Dead_Date"))
fix_dead_dates_all <- list(fix_dead_dates_temp1,fix_dead_dates_temp2,fix_dead_dates_temp3,
fix_dead_dates_temp4,fix_dead_dates_temp5,fix_dead_dates_temp6)
rm2(fix_dead_dates_temp1,fix_dead_dates_temp2,fix_dead_dates_temp3)
rm2(fix_dead_dates_temp4,fix_dead_dates_temp5,fix_dead_dates_temp6)
x <- fix_dead_dates_all[[1]]
require(data.table)
data_temp <- get(x[[1]])
cat(x[[1]], "\n")
x <- fix_dead_dates_all[[1]]
ids <- c("pull_trim","pull_trim2")
merge_data <- "Merge_IDs"
require(data.table)
data_temp <- get(x[[1]])
cat(x[[1]], "\n")
files_temp1 <- as.vector(t(x[,!(colnames(x) %in% c(ids))]))
files_temp1 <- as.vector(t(data_temp[,!(colnames(data_temp) %in% c(ids))]))
!(colnames(data_temp) %in% c(ids))
files_temp1 <- as.vector(t(colnames(data_temp)[!(colnames(data_temp) %in% c(ids))]))
files_temp1_trim <- data.frame(file=files_temp1[!is.na(files_temp1)],row_str=NA,col_str=NA,file_str=NA,stringsAsFactors=FALSE)
View(data_temp)
View(files_temp1_trim)
files_temp1_trim <- data.frame(file=x,row_str=NA,col_str=NA,file_str=NA,stringsAsFactors=FALSE)
View(files_temp1_trim)
x
fix_dead_dates_temp1 <- list(data=c("EurekahedgeHF_Stats_noreturns_deaddates"))
fix_dead_dates_temp2 <- list(data=c("EurekahedgeHF_Fund_Details_deaddates"))
fix_dead_dates_temp3 <- list(data=c("EurekahedgeHF_Fee_and_Redemption_deaddates"))
fix_dead_dates_temp4 <- list(data=c("EurekahedgeHF_Profile_Strategy_deaddates"))
fix_dead_dates_temp5 <- list(data=c("EurekahedgeHF_Identifiers_deaddates"))
fix_dead_dates_temp6 <- list(data=c("EurekahedgeHF_Instruments_Traded_deaddates"))
fix_dead_dates_all <- list(fix_dead_dates_temp1,fix_dead_dates_temp2,fix_dead_dates_temp3,
fix_dead_dates_temp4,fix_dead_dates_temp5,fix_dead_dates_temp6)
rm2(fix_dead_dates_temp1,fix_dead_dates_temp2,fix_dead_dates_temp3)
rm2(fix_dead_dates_temp4,fix_dead_dates_temp5,fix_dead_dates_temp6)
x <- fix_dead_dates_all[[1]]
ids <- c("pull_trim","pull_trim2")
merge_data <- "Merge_IDs"
data_temp <- get(x[[1]])
files_temp1_trim <- data.frame(file=x[[1]],row_str=NA,col_str=NA,file_str=NA,stringsAsFactors=FALSE)
View(files_temp1_trim)
files_temp1 <- x[[1]]
files_temp1_trim <- data.frame(file=x[[1]],row_str=NA,col_str=NA,file_str=NA,stringsAsFactors=FALSE)
View(files_temp1_trim)
str(data_temp)
require(data.table)
#data_name_temp <- x[[1]]
data_temp <- get(x[[1]])
cat(x[[1]], "\n")
files_temp1 <- x[[1]]
files_temp1_trim <- data.frame(file=x[[1]],row_str=NA,col_str=NA,file_str=NA,stringsAsFactors=FALSE)
#files_temp1_trim[,"row_str"] <- paste(files_temp1_trim[,"file"],"[",",","'pull_trim2'","]","==","'",x[,"pull_trim2"],"'",sep="")
files_temp1_trim[,"row_str"] <- ""
files_temp1_trim[,"col_str"] <- paste("!(colnames(",files_temp1_trim[,"file"],") %in% c('Dead_Date'))",sep="")
files_temp1_trim[,"file_str"] <- paste(files_temp1_trim[,"file"],"[",files_temp1_trim[,"row_str"],",",files_temp1_trim[,"col_str"],"]",sep="")
rm(files_temp1)
files_temp2 <- merge_data
files_temp2_trim <- data.frame(file=files_temp2[!is.na(files_temp2)],row_str=NA,col_str=NA,file_str=NA,stringsAsFactors=FALSE)
#files_temp2_trim[,"row_str"] <- paste(files_temp2_trim[,"file"],"[",",","'pull_trim2'","]","==","'",x[,"pull_trim2"],"'",sep="")
files_temp2_trim[,"row_str"] <- ""
files_temp2_trim[,"col_str"] <- paste("!(colnames(",files_temp2_trim[,"file"],") %in% c('pull'))",sep="")
files_temp2_trim[,"file_str"] <- paste(files_temp2_trim[,"file"],"[",files_temp2_trim[,"row_str"],",",files_temp2_trim[,"col_str"],"]",sep="")
rm(files_temp2)
files_temp_all <- rbind(files_temp2_trim,files_temp1_trim)
rm(files_temp2_trim,files_temp1_trim)
View(files_temp_all)
merge_temp <- eval(parse(text=files_temp_all[1,"file_str"]))
str(merge_temp)
i <- 2
i <- 2
data_temp <- data.frame(file_str=rbind("merge_temp",files_temp_all[i,"file_str"]),stringsAsFactors=FALSE)
View(data_temp)
common_ids1a <- adply(.data=data_temp, .margins=1, .fun = function(x){
temp_order <- data.frame(cols=colnames(eval(parse(text=x[,"file_str"]))),order=NA,stringsAsFactors=FALSE)
temp_order[,"order"] <- seq(1,nrow(temp_order))
return(temp_order)
}, .expand = FALSE, .progress = "none")
View(common_ids1a)
common_ids1b <- ddply(.data=common_ids1a[,!(colnames(common_ids1a) %in% c("X1"))], .variables=c("cols"),.fun = function(x){
return(data.frame(freq=nrow(x),avg_order=mean(x[,"order"]),stringsAsFactors=FALSE))
}, .progress = "none")
rm(common_ids1a)
common_ids1b <- common_ids1b[order(common_ids1b[,"avg_order"],common_ids1b[,"freq"],common_ids1b[,"cols"]),]
row.names(common_ids1b) <- seq(nrow(common_ids1b))
View(common_ids1b)
common_ids1 <- common_ids1b[common_ids1b[,"freq"]==nrow(data_temp),]
rm(common_ids1b)
merge_temp <- merge(data.table(merge_temp, key=common_ids1[,"cols"]),
eval(parse(text=paste("data.table(",data_temp[2,"file_str"],",key=common_ids1[,'cols'])",sep=""))),
by.x=common_ids1[,"cols"], by.y=common_ids1[,"cols"],
all.x=TRUE, all.y=FALSE, sort=FALSE, suffixes=c(".x",".y"))
View(merge_temp)
invisible(gc(verbose = FALSE, reset = TRUE))
order_ids <- c("pull_trim","pull_trim2",
"Fund_ID","Fund_Name","Date_Added","Flagship","Closed","Limited","Dead","Dead_Date","Dead_Reason",
"date","yr","month","bad_min","bad_max")
merge_temp <- as.data.frame(merge_temp,stringsAsFactors=FALSE)
merge_temp <- merge_temp[,c(order_ids,colnames(merge_temp)[!(colnames(merge_temp) %in% c(order_ids))])]
merge_temp <- merge_temp[order(merge_temp[,"Fund_ID"],merge_temp[,"date"],
merge_temp[,"pull_trim"],merge_temp[,"pull_trim2"]),]
row.names(merge_temp) <- seq(nrow(merge_temp))
x[[1]]
